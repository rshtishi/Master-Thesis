

options {
  STATIC = true;
}



PARSER_BEGIN(Rando)

package projekti;
import java.io.PrintStream;
import java.util.*;



public class Rando
{
  //Deklarimi i tabeles se simboleve
  public static LookupTable symbolTable=new LookupSymbolTable();
  //Deklari i objekti te cilet do jape mundesi perdoruesit te fuse te dhena
  public static  Scanner jin=new Scanner(System.in);

  //Metoda qe do te kontrolloje per 
  public static boolean isNumeric(String str)
  {
  return str.matches("-?\\d+(\\.\\d+)?");  //match a number with optional '-' and decimal.
  }

  //Metoda Kryesore qe therret te gjithe aplikacionin
  public static void main(String args[]) throws ParseException
  {
     Rando parser = new Rando(System.in);
     int x=0;
     while (x==0)
    {
      System.out.println("Reading from standard input...");
      try
      {
        switch (Rando.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Terminate.");
          x=1;
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("Error.");
        Rando.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
     //parser.Start();
  }
  
  double previousValue=0.0;

}

PARSER_END(Rando)



SKIP :
{ " " | "\t" | "\n" | "\r" | "\r\n" }

TOKEN:{< PLUS:"+">}
TOKEN:{< MINUS:"-">}
TOKEN:{< TIMES:"*">}
TOKEN:{< DIVIDE:"/">}
TOKEN:{< EQUAL:"=">}
TOKEN:{< COMMA:",">}
TOKEN:{<NUMBER: < DIGITS >| < DIGITS >"."< DIGITS >  | < DIGITS >"." | "."< DIGITS >>}
TOKEN:{< #DIGITS:(["0"-"9"])+>}
TOKEN:{< OPEN_PAR:"(">}
TOKEN:{< CLOSE_PAR:")">}
TOKEN:{< PREVIOUS:"$">}
TOKEN:{ < FILLIM: "Fillim">}
TOKEN:{ < FUND: "Fund">}
TOKEN:{ < LEXO: "Lexo">}
TOKEN:{ < SHKRUAJ: "Shkruaj">}
TOKEN:{< NDRYSHORE:( ((["a"-"z"])+ | (["A"-"Z"])+ ) ("_" | "-" | ["a"-"z"] | ["A"-"Z"] | ["0"-"9"])*)>}
TOKEN:{< FJALI:( ("'") (["a"-"z"] | ["A"-"Z"] |  "_"  | "-" | "?"  | "#" | "@"| "$" | "!" | "*" | "="| "/" | "*" | " " | ["0"-"9"])*("'"))*>}


/** Looping*/
int one_line() :
{}
{
   Start() ";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void Start() throws NumberFormatException:
{Token t;}
{
  < FILLIM>
    Action()
  < FUND >
  
}

public void Action():
{Token t,v;}
{
		(
	  	< LEXO > t=< NDRYSHORE> 
		{
		  
		  String id=t.image;
		  String value=jin.next();
		  String type;
		  if(isNumeric(value))
		  {
		    type="Number";
		  }
		  else
		  {
		    type="String";
		  }
		  value=value.replace("'","");
		  symbolTable.put(id,new Symbol(value,type));   
		}
		(
		  < COMMA> t=< NDRYSHORE>
		  {
		     
			  id=t.image;
			  value=jin.next();
			  if(isNumeric(value))
			  {
			    type="Number";
			  }
			  else
			  {
			    type="String";
			  }
			  value=value.replace("'","");
			  symbolTable.put(id,new Symbol(value,type));   
		  } 
		)*
		
		|
		
		< SHKRUAJ>  (t= < NDRYSHORE> | t=< FJALI>)
		{
		  if(t.kind==NDRYSHORE)
		  {
			  if(symbolTable.containsKey(t.image))
			  {
			    System.out.print(symbolTable.getValue(t.image));
			  }
			  else
			  {
			    id=t.image;
			    symbolTable.put(id,new Symbol("null","String"));
			    System.out.print(symbolTable.getValue(t.image)); 
			  }
		  }
		  else
		  {
		        value=t.image;
		    	value=value.replace("'","");
		    	System.out.print(value);
		  }
		}
		(
		  < COMMA>  (t= < NDRYSHORE> | t=< FJALI>)
			{
			  if(t.kind==NDRYSHORE)
			  {
				  if(symbolTable.containsKey(t.image))
				  {
				    System.out.print(symbolTable.getValue(t.image));
				  }
				  else
				  {
				    id=t.image;
				    symbolTable.put(id,new Symbol("null","String"));
				    System.out.print(symbolTable.getValue(t.image));
				  }
			  }
			  else
			  {
			        value=t.image;
			    	value=value.replace("'","");
			    	System.out.print(value);
			  }
			}
		)*
		{
		  System.out.println();
		}
		
		|
		
		t= < NDRYSHORE> < EQUAL>   (v= < FJALI> | v=<NUMBER >)
		{
		  
	      id=t.image;
		  value=v.image;
		  
		  if(isNumeric(value))
		  {
		    type="Number";
		  }
		  else
		  {
		    type="String";
		  }
		  
	      value=value.replace("'","");
	      symbolTable.put(id,new Symbol(value,type));
		}
       
	 
	)*
}




