

options {
  STATIC = false;
}



PARSER_BEGIN(Rando)

package projekti;
import java.io.PrintStream;
import java.util.*;



public class Rando
{
  Map< String,String> varList=new HashMap< String , String>();
  Map< String,String> typeList=new HashMap< String,String>();
  Scanner jin=new Scanner(System.in);

  public static boolean isNumeric(String str)
  {
  return str.matches("-?\\d+(\\.\\d+)?");  //match a number with optional '-' and decimal.
  }
  
  public static void main(String args[]) throws ParseException
  {
     Rando parser = new Rando(System.in);
     parser.Start();
  }
  double previousValue=0.0;

}

PARSER_END(Rando)



SKIP:
{
  " " | "\t" | "\n" | "\r"
}
TOKEN:{<EOL:"\n" | "\r" | "\r\n" >}
TOKEN:{< PLUS:"+">}
TOKEN:{< MINUS:"-">}
TOKEN:{< TIMES:"*">}
TOKEN:{< DIVIDE:"/">}
TOKEN:{< EQUAL:"=">}
TOKEN:{< COMMA:",">}
TOKEN:{<NUMBER: < DIGITS >| < DIGITS >"."< DIGITS >  | < DIGITS >"." | "."< DIGITS >>}
TOKEN:{< #DIGITS:(["0"-"9"])+>}
TOKEN:{< OPEN_PAR:"(">}
TOKEN:{< CLOSE_PAR:")">}
TOKEN:{< PREVIOUS:"$">}
TOKEN:{ < FILLIM: "Fillim">}
TOKEN:{ < FUND: "Fund">}
TOKEN:{ < LEXO: "Lexo">}
TOKEN:{ < SHKRUAJ: "Shkruaj">}
TOKEN:{< NDRYSHORE:( ((["a"-"z"])+ | (["A"-"Z"])+ ) ("_" | "-" | ["a"-"z"] | ["A"-"Z"] | ["0"-"9"])*)>}
TOKEN:{< FJALI:( ("'") (["a"-"z"] | ["A"-"Z"] |  "_"  | "-" | "?"  | "#" | "@"| "$" | "!" | "*" | "="| "/" | "*" | " " | ["0"-"9"])*("'"))*>}

void Start() throws NumberFormatException:
{Token t;}
{
  < FILLIM>
    Action()
  < FUND >
  < EOL>
}

public void Action():
{Token t,v;}
{		(
	  	< LEXO > t=< NDRYSHORE> 
		{
		  String var=t.image;
		  String value=jin.next();
		  if(isNumeric(value))
		  {
		    typeList.put(var,"Number");
		  }
		  else
		  {
		    typeList.put(var,"String");
		  }
		  value=value.replace("'","");
		  varList.put(var,value);   
		}
		(
		  < COMMA> t=< NDRYSHORE>
		  {
			  var=t.image;
			  value=jin.next();
			  if(isNumeric(value))
			  {
			    typeList.put(var,"Number");
			  }
			  else
			  {
			    typeList.put(var,"String");
			  }
			  value=value.replace("'","");
			  varList.put(var,value);   
		  } 		)*
		
		|
		
		< SHKRUAJ>  (t= < NDRYSHORE> | t=< FJALI>)
		{
		  if(t.kind==NDRYSHORE)
		  {
			  if(varList.containsKey(t.image))
			  {
			    System.out.print(varList.get(t.image));
			  }
			  else
			  {
			    var=t.image;
			    varList.put(var,"null");
			    System.out.print(varList.get(t.image));
			    
			  }
		  }
		  else
		  {
		        value=t.image;
		    	value=value.replace("'","");
		    	System.out.print(value);		  }
		}
		(
		  < COMMA>  (t= < NDRYSHORE> | t=< FJALI>)
			{
			  if(t.kind==NDRYSHORE)
			  {
				  if(varList.containsKey(t.image))
				  {
				    System.out.print(varList.get(t.image));
				  }
				  else
				  {
				    var=t.image;
				    varList.put(var,"null");
				    System.out.print(varList.get(t.image));
				    
				  }
			  }
			  else
			  {
			        value=t.image;
			    	value=value.replace("'","");
			    	System.out.print(value);
			  }
			}		)*
		{
		  System.out.println();		}
		
		|
		
		t= < NDRYSHORE> < EQUAL>   (v= < FJALI> | v=<NUMBER >)
		{
		  
	      String ndryshore=t.image;
		  String vlera=v.image;
		  
		  if(isNumeric(vlera))
		  {
		    typeList.put(ndryshore,"Number");
		  }
		  else
		  {
		    typeList.put(ndryshore,"String");
		  }
		  
	      vlera=vlera.replace("'","");
	      varList.put(ndryshore,vlera);		}
       
	 
	)*
}




